--Question 1

model MovieRental

enum PriceCode {regular, family, newRelease}

--classes

class Customer
attributes
	name: String
	numRen: Integer
	total: Real
operations 
addRental()
	begin
	end

getName()

getTotalCharge()

	begin
		declare temp:Real;
		self.total:=0;
		for ren in self.rentals do
			temp := ren.getCharge();
			self.total :=  self.total + temp;
	
		end;
	end


Statement()
	begin
		declare aCharge:Charge, sm:Movie, ch:Real, t:String;
		self.getTotalCharge();
		self.numRen:=self.rentals->size();
		for ren in self.rentals do
			ch:=ren.getCharge();
			sm:=ren.getMovie();
			t:=sm.getTitle();
			aCharge := new Charge;
			aCharge.chVal:=ch;
			aCharge.chT:=t;
			insert(self, aCharge) into customerCharges
		end;
	end
end

class Rental
attributes 
	daysRented:Integer

operations
	getDaysRented(): Integer
		begin
			result:=self.daysRented;
		end

	getMovie() : Movie
		begin
			result:= self.movie;
		end

	getCharge(): Real
		begin
			declare wrkCh:Real, m:Movie, pc:PriceCode, dy:Integer;

			m:=self.movie;
			dy:=self.getDaysRented();
			pc:=self.movie.getPriceCode();

			wrkCh:=0;

			if pc=PriceCode::regular then
				wrkCh:=2.0;
				if dy > 2 then
					wrkCh:=wrkCh + (dy - 2) *1.5;
				end;
			end;

			if pc=PriceCode::family then
				wrkCh:=1.5;
				if dy > 3 then
					wrkCh:= wrkCh + (dy - 3) * 1.5;
				end;
			end;

			if pc=PriceCode::newRelease then
				wrkCh:= dy * 3.0;
			end;

			result:=wrkCh
		end

end

class Movie
attributes
	title:String
	priceCode:PriceCode

operations	
	getPriceCode(): PriceCode
		begin
			result := self.priceCode;
		end

	setPriceCode(code: PriceCode)
		begin 
			self.priceCode := code;
		end

	getTitle():String
		begin
			result:=self.title;
		end
end

class Charge
attributes
	chVal: Real
	chT: String

operations
end

association custRentals between
	Customer[1] role renter
	Rental[0..*] role rentals
end

association movRental between
	Rental[0..*] role movRentals
	Movie [1] role movie
end

association customerCharges between 
	Customer [1] role cust
	Charge[0..*] role charges
end

constraints 

context Customer
	inv leastRental:numRen >= 1
	inv lateRentals: self.rentals -> select(daysRented > 3) -> isEmpty