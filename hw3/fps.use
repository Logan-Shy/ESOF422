model FPS

abstract class FpsState
attributes
    fpsPlayer:FpsPlayer
operations
    initInstance(e:FpsPlayer)
        begin
            self.fpsPlayer := e;
        end

    seeOpponent(e:FpsPlayer)
        begin
        end
    
    lostOpponent()
        begin
        end

    receiveBlow(i:Integer)
        begin
        end
end

class Attack < FpsState
operations
    seeOpponent(e:FpsPlayer)
        begin
            WriteLine('Already have seen an enemy, who looks defeatable');
        end

    lostOpponent()
        begin
            WriteLine('Darn! Your opponent ran away!');
            self.fpsPlayer.fpsState := self.fpsPlayer.neutralState;
            self.fpsPlayer.engagedPlayer := self.fpsPlayer;

        end
    
    receiveBlow(i:Integer)
        begin
            WriteLine('You took a bit of damage');
            self.fpsPlayer.health := self.fpsPlayer.health - i;
            if self.fpsPlayer.health <= 0 then
                begin
                self.fpsPlayer.fpsState := self.fpsPlayer.dieState;
                WriteLine('...And you also died. Sorry!');
                end
            end;
        end
end

class Neutral < FpsState
operations
    seeOpponent(e:FpsPlayer)
        begin
            if e.oclIsTypeOf(Defeatable) then
                self.fpsPlayer.fpsState := self.fpsPlayer.attackState;
            else
                self.fpsPlayer.fpsState := self.fpsPlayer.panicState;
            end;

            self.fpsPlayer.engagedPlayer := e;
            
            if e.engagedPlayer <> self.fpsPlayer then
                e.seeOpponent(self.fpsPlayer)
            end;

        end

    lostOpponent()
        begin
            WriteLine('You dont have an opponent to lose');
        end

    receiveBlow(i:Integer)
        begin
            WriteLine('There isnt a nearby enemy to receive a blow from!');
        end
end

class Panic < FpsState
operations
    seeOpponent(e:FpsPlayer)
        begin
            WriteLine('Already have seen an enemy, who looks undefeatable');
        end
    
    lostOpponent()
        begin
            WriteLine('You have escaped the undefeatable enemy');
            self.fpsPlayer.engagedPlayer.lostOpponent();
            self.fpsPlayer.fpsState := self.fpsPlayer.neutralState;
            self.fpsPlayer.engagedPlayer := self.fpsPlayer;
        end
    
    receiveBlow(i:Integer)
        begin
            WriteLine('Ouch! You took some HEFTY damage');
            self.fpsPlayer.health := self.fpsPlayer.health - i;
            if self.fpsPlayer.health <= 0 then
                begin
                WriteLine('...And also died. Sorry!');
                self.fpsPlayer.fpsState := self.fpsPlayer.dieState;
                end
            end;
        end
end

class Die < FpsState
operations
    seeOpponent(e:FpsPlayer)
        begin
            WriteLine('Sorry, you have died!');
        end

    lostOpponent()
        begin
            WriteLine('Sorry, you have died!');
        end
    
    receiveBlow(i:Integer)
        begin
            WriteLine('Sorry, you have died! And now they arere desecrating you!');
        end
end


abstract class FpsPlayer
attributes
    health : Integer
    attackDmg : Integer
    engagedPlayer : FpsPlayer --if not engaged with enemy, player will be itself
    fpsState : FpsState
    attackState : FpsState
    neutralState : FpsState
    panicState : FpsState
    dieState : FpsState

operations
    initInstance()
        begin
        end    

    attackOpponent()
        begin
            if self.fpsState <> self.dieState then
                begin
                    self.engagedPlayer.receiveBlow(self.attackDmg);
                    if self.engagedPlayer.health <= 0 then
                        begin
                        WriteLine('Good Job! You slayed your opponent');
                        self.engagedPlayer := self;
                        end
                    end;
                end
            else
                WriteLine('Sorry, you have died!')
            end;
        end
        pre noSelfHarm: self.engagedPlayer <> self

    seeOpponent(e:FpsPlayer)
        begin
            self.fpsState.seeOpponent(e);
        end

    lostOpponent()
        begin
            self.fpsState.lostOpponent();
        end
    
    receiveBlow(i:Integer)
        begin
            self.fpsState.receiveBlow(i);
        end

statemachines
    psm StatePattern
    states
        startUp:initial
        neutral [fpsState = neutralState]
        attack  [fpsState = attackState]
        panic   [fpsState = panicState]
        die     [fpsState = dieState]
    transitions
        startUp -> neutral {create}
        neutral -> attack { [e.oclIsTypeOf(Defeatable) and fpsState = neutralState] seeOpponent() }
        neutral -> attack { [e.oclIsTypeOf(HumanPlayer) and self.oclIsTypeOf(Undefeatable)] seeOpponent() }
        neutral -> panic { [e.oclIsTypeOf(Undefeatable) and fpsState = neutralState] seeOpponent() }
        neutral -> panic { [e.oclIsTypeOf(HumanPlayer) and self.oclIsTypeOf(Defeatable)] seeOpponent() }
        attack -> neutral { [fpsState = attackState] lostOpponent() }
        attack -> neutral { [fpsState = attackState and self.engagedPlayer.oclIsTypeOf(Defeatable)] attackOpponent() }
        attack -> die { [fpsState = attackState and health <= i] receiveBlow() }
        
        attack -> attack { [fpsState = attackState and health > i] receiveBlow() }
        
        panic -> neutral { [fpsState = panicState] lostOpponent() }
        panic -> die { [fpsState = panicState and health <= i] receiveBlow() }
    end
end

class HumanPlayer < FpsPlayer
operations
    initInstance()
        begin
            self.health := 100;
            self.attackDmg := 25;
            self.engagedPlayer := self;
            self.attackState := new Attack;
            self.attackState.initInstance(self);
            self.neutralState := new Neutral;
            self.neutralState.initInstance(self);
            self.panicState := new Panic;
            self.panicState.initInstance(self);
            self.dieState := new Die;
            self.dieState.initInstance(self);
            self.fpsState := self.neutralState; -- Start in a neutral state
        end
end

class Defeatable < FpsPlayer
operations
    initInstance()
        begin
            self.health := 20;
            self.attackDmg := 10;
            self.engagedPlayer := self;
            self.attackState := new Attack;
            self.attackState.initInstance(self);
            self.neutralState := new Neutral;
            self.neutralState.initInstance(self);
            self.panicState := new Panic;
            self.panicState.initInstance(self);
            self.dieState := new Die;
            self.dieState.initInstance(self);
            self.fpsState := self.neutralState;
        end
end

class Undefeatable < FpsPlayer
operations
    initInstance()
        begin
            self.health := 200;
            self.attackDmg := 50;
            self.engagedPlayer := self;
            self.attackState := new Attack;
            self.attackState.initInstance(self);
            self.neutralState := new Neutral;
            self.neutralState.initInstance(self);
            self.panicState := new Panic;
            self.panicState.initInstance(self);
            self.dieState := new Die;
            self.dieState.initInstance(self);
            self.fpsState := self.neutralState; -- Start in a neutral state
        end
end


