model FPS

abstract class FpsState
operations
    seeOpponent(e:FpsPlayer)
        begin
        end
    
    lostOpponent()
        begin
        end

    receiveBlow(i:Integer)
        begin
        end
end

class Attack < FpsState
operations
    seeOpponent(e:FpsPlayer)
        begin
            WriteLine('Already have seen an enemy, who looks defeatable');
        end

    lostOpponent()
        begin
            WriteLine('Darn! Your opponent ran away!');
            self.fpsPlayer.fpsState := self.fpsPlayer.neutralState;

        end
    
    receiveBlow(i:Integer)
        begin
            WriteLine('Ouch! You took some damage');
            if self.fpsPlayer.health <= 0 then
                self.fpsPlayer.fpsState := self.fpsPlayer.dieState
            end;
        end
end

class Neutral < FpsState
operations
    seeOpponent(e:FpsPlayer)
        begin
            if e.oclIsTypeOf(Defeatable) then
                self.fpsPlayer.fpsState := self.fpsPlayer.attackState
            else
                self.fpsPlayer.fpsState := self.fpsPlayer.panicState
            end;

            self.fpsPlayer.engagedPlayer := e;
            e.engagedPlayer := self.fpsPlayer; 
        end

    lostOpponent()
        begin
            WriteLine('You dont have an opponent to lose');
        end

    receiveBlow(i:Integer)
        begin
            WriteLine('There isnt a nearby enemy to receive a blow from!');
        end
end

class Panic < FpsState
operations
    seeOpponent(e:FpsPlayer)
        begin
            WriteLine('Already have seen an enemy, who looks undefeatable');
        end
    
    lostOpponent()
        begin
            WriteLine('You have escaped the undefeatable enemy');
            self.fpsPlayer.fpsState := self.fpsPlayer.neutralState;
        end
    
    receiveBlow(i:Integer)
        begin
            WriteLine('Ouch! You took some damage');
            self.fpsPlayer.health := self.fpsPlayer.health - i;
            if self.fpsPlayer.health <= 0 then
                self.fpsPlayer.fpsState := self.fpsPlayer.dieState
            end;
        end
end

class Die < FpsState
operations
    seeOpponent(e:FpsPlayer)
        begin
            WriteLine('Sorry, you have died!');
        end

    lostOpponent()
        begin
            WriteLine('Sorry, you have died!');
        end
    
    receiveBlow(i:Integer)
        begin
            WriteLine('Sorry, you have died! And now they arere desecrating you!');
        end
end


abstract class FpsPlayer
attributes
    health : Integer
    attackDmg : Integer
    engagedPlayer : FpsPlayer --if not engaged with enemy, player will be itself
    fpsState : FpsState
    attackState : FpsState
    neutralState : FpsState
    panicState : FpsState
    dieState : FpsState

operations
    initInstance()
        begin
        end    

    attackOpponent(e:FpsPlayer)
        begin
            e.receiveBlow(self.attackDmg);
        end
        pre isEngaged: self.engagedPlayer = e
        pre noSelfHarm: self.engagedPlayer <> self

    flee()
        begin
            self.engagedPlayer.lostOpponent();
            self.engagedPlayer := self;
            WriteLine('Success! you have fleed your opponent. Coward.');
        end

    seeOpponent(e:FpsPlayer)
        begin
            self.fpsState.seeOpponent(e);
        end

    lostOpponent()
        begin
            self.fpsState.lostOpponent();
        end
    
    receiveBlow(i:Integer)
        begin
            self.fpsState.receiveBlow(i);
        end
end

class HumanPlayer < FpsPlayer
operations
    initInstance()
        begin
            self.health := 100;
            self.attackDmg := 25;
            self.engagedPlayer := self;
            self.attackState := new Attack;
            self.neutralState := new Neutral;
            self.panicState := new Panic;
            self.dieState := new Die;
            self.fpsState := self.neutralState; -- Start in a neutral state
        end
end

class Defeatable < FpsPlayer
operations
    initInstance()
        begin
            self.health := 20;
            self.attackDmg := 10;
            self.engagedPlayer := self;
            self.attackState := new Attack;
            self.neutralState := new Neutral;
            self.panicState := new Panic;
            self.dieState := new Die;
            self.fpsState := self.neutralState; -- Start in a neutral state
        end
end

class Undefeatable < FpsPlayer
operations
    initInstance()
        begin
            self.health := 200;
            self.attackDmg := 50;
            self.engagedPlayer := self;
            self.attackState := new Attack;
            self.neutralState := new Neutral;
            self.panicState := new Panic;
            self.dieState := new Die;
            self.fpsState := self.neutralState; -- Start in a neutral state
        end
end

--associations
association FPSState between
 FpsState[1]
 FpsPlayer[1]
end