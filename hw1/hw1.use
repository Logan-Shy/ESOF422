

-- This file describes the class structure for an Observer design pattern.
-- The authors are Logan Shy, and Shelby Huston.

model ObserverPattern

abstract class IObserver
operations
    update()
        begin
        end
end

abstract class Subject
operations
    attach(g : IObserver)
        begin
            insert (g, self) into observersList
        end

    detach(g : IObserver)
        begin
            destroy g
        end

    notify()
        begin
            for o in self.observers do
                o.update();
            end
        end
end
    
class ConcreteSubject < Subject
attributes
    state:String
operations
    getState(): String
        begin
            result := self.state
        end

    setState(newState : String)
        begin
            self.state := newState;
        end

end

class ConcreteObserver < IObserver
attributes
    state:String
operations
    update()
        begin
            self.state := self.savedSub.getState();
        end
end

composition observersList between
    IObserver[0..*] role observers
    Subject[0..1] 
end

association subject between
    ConcreteSubject[0..1] role savedSub
    ConcreteObserver[1]
end