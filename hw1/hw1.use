

-- This file describes the class structure for an Observer design pattern.
-- The authors are Logan Shy, and Shelby Huston.

model ObserverPattern

abstract class Subject
attributes
    state: String init : 'Old State'
    --observersList; this is defined in the associations 

operations
    attach(g : IObserver)
        begin
            insert (g, self) into observersList
        end

    detach(g : IObserver)
        begin
            delete (g, self) from observersList
        end

    notify()
        begin
            for o in self.observers do
                o.update();
            end
        end

    getState(): String
        begin
            result := self.state
        end

    setState(newState : String)
        begin
            self.state := newState;
        end
end
    
class ConcreteSubject < Subject
attributes
operations
end

abstract class IObserver
attributes
    state : String init : 'Old State'
operations
    update()
        begin
        end
end

class ConcreteObserver < IObserver
attributes
operations
    update()
        begin
            self.state := self.subject.getState();
        end
end

composition observersList between
    IObserver[0..*] role observers
    Subject[1] role subject
end